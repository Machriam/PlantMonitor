//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { GatewayAppApiBase } from './GatewayAppApiBase';

export interface IMovementProgrammingClient {

    getPlan(deviceId?: string | undefined): Promise<DeviceMovement>;

    updatePlan(movement: DeviceMovement): Promise<void>;
}

export class MovementProgrammingClient extends GatewayAppApiBase implements IMovementProgrammingClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getPlan(deviceId?: string | undefined): Promise<DeviceMovement> {
        let url_ = this.baseUrl + "/api/MovementProgramming/getplan?";
        if (deviceId === null)
            throw new Error("The parameter 'deviceId' cannot be null.");
        else if (deviceId !== undefined)
            url_ += "deviceId=" + encodeURIComponent("" + deviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetPlan(_response));
        });
    }

    protected processGetPlan(response: Response): Promise<DeviceMovement> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceMovement.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeviceMovement>(null as any);
    }

    updatePlan(movement: DeviceMovement): Promise<void> {
        let url_ = this.baseUrl + "/api/MovementProgramming/updateplan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(movement);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdatePlan(_response));
        });
    }

    protected processUpdatePlan(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IDeviceClient {

    previewImage(ip?: string | undefined): Promise<FileResponse>;

    killCamera(ip?: string | undefined): Promise<void>;

    cameraInfo(ip?: string | undefined): Promise<string>;

    currentPosition(ip?: string | undefined): Promise<number>;

    zeroPosition(ip?: string | undefined): Promise<void>;

    toggleMotorEngage(ip?: string | undefined, engage?: boolean | undefined): Promise<void>;

    move(ip?: string | undefined, steps?: number | undefined, minTime?: number | undefined, maxTime?: number | undefined, rampLength?: number | undefined): Promise<void>;
}

export class DeviceClient extends GatewayAppApiBase implements IDeviceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    previewImage(ip?: string | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Device/previewimage?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processPreviewImage(_response));
        });
    }

    protected processPreviewImage(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    killCamera(ip?: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Device/killcamera?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processKillCamera(_response));
        });
    }

    protected processKillCamera(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    cameraInfo(ip?: string | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/Device/camerainfo?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCameraInfo(_response));
        });
    }

    protected processCameraInfo(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    currentPosition(ip?: string | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/Device/currentposition?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCurrentPosition(_response));
        });
    }

    protected processCurrentPosition(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    zeroPosition(ip?: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Device/zeroposition?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processZeroPosition(_response));
        });
    }

    protected processZeroPosition(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    toggleMotorEngage(ip?: string | undefined, engage?: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Device/togglemotorengage?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        if (engage === null)
            throw new Error("The parameter 'engage' cannot be null.");
        else if (engage !== undefined)
            url_ += "engage=" + encodeURIComponent("" + engage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processToggleMotorEngage(_response));
        });
    }

    protected processToggleMotorEngage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    move(ip?: string | undefined, steps?: number | undefined, minTime?: number | undefined, maxTime?: number | undefined, rampLength?: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Device/move?";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "ip=" + encodeURIComponent("" + ip) + "&";
        if (steps === null)
            throw new Error("The parameter 'steps' cannot be null.");
        else if (steps !== undefined)
            url_ += "steps=" + encodeURIComponent("" + steps) + "&";
        if (minTime === null)
            throw new Error("The parameter 'minTime' cannot be null.");
        else if (minTime !== undefined)
            url_ += "minTime=" + encodeURIComponent("" + minTime) + "&";
        if (maxTime === null)
            throw new Error("The parameter 'maxTime' cannot be null.");
        else if (maxTime !== undefined)
            url_ += "maxTime=" + encodeURIComponent("" + maxTime) + "&";
        if (rampLength === null)
            throw new Error("The parameter 'rampLength' cannot be null.");
        else if (rampLength !== undefined)
            url_ += "rampLength=" + encodeURIComponent("" + rampLength) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processMove(_response));
        });
    }

    protected processMove(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IPictureClient {

    getPictureSeries(deviceId?: string | undefined): Promise<PictureSeriesData[]>;
}

export class PictureClient extends GatewayAppApiBase implements IPictureClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getPictureSeries(deviceId?: string | undefined): Promise<PictureSeriesData[]> {
        let url_ = this.baseUrl + "/api/Picture/pictureseriesnames?";
        if (deviceId === null)
            throw new Error("The parameter 'deviceId' cannot be null.");
        else if (deviceId !== undefined)
            url_ += "deviceId=" + encodeURIComponent("" + deviceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetPictureSeries(_response));
        });
    }

    protected processGetPictureSeries(response: Response): Promise<PictureSeriesData[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PictureSeriesData.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PictureSeriesData[]>(null as any);
    }
}

export interface IDeviceConfigurationClient {

    getCertificateData(): Promise<CertificateData>;

    getWebSshCredentials(): Promise<WebSshCredentials>;

    getDevices(): Promise<DeviceHealthState[]>;
}

export class DeviceConfigurationClient extends GatewayAppApiBase implements IDeviceConfigurationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    getCertificateData(): Promise<CertificateData> {
        let url_ = this.baseUrl + "/api/DeviceConfiguration/certificates";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCertificateData(_response));
        });
    }

    protected processGetCertificateData(response: Response): Promise<CertificateData> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CertificateData.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CertificateData>(null as any);
    }

    getWebSshCredentials(): Promise<WebSshCredentials> {
        let url_ = this.baseUrl + "/api/DeviceConfiguration/websshcredentials";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetWebSshCredentials(_response));
        });
    }

    protected processGetWebSshCredentials(response: Response): Promise<WebSshCredentials> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WebSshCredentials.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WebSshCredentials>(null as any);
    }

    getDevices(): Promise<DeviceHealthState[]> {
        let url_ = this.baseUrl + "/api/DeviceConfiguration/devices";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetDevices(_response));
        });
    }

    protected processGetDevices(response: Response): Promise<DeviceHealthState[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeviceHealthState.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeviceHealthState[]>(null as any);
    }
}

export interface IAppConfigurationClient {

    updateDeviceSettings(password?: string | undefined, user?: string | undefined): Promise<void>;

    updateIpRanges(ipFrom?: string | undefined, ipTo?: string | undefined): Promise<void>;
}

export class AppConfigurationClient extends GatewayAppApiBase implements IAppConfigurationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    updateDeviceSettings(password?: string | undefined, user?: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/AppConfiguration/updatedevicesettings?";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        if (user === null)
            throw new Error("The parameter 'user' cannot be null.");
        else if (user !== undefined)
            url_ += "user=" + encodeURIComponent("" + user) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateDeviceSettings(_response));
        });
    }

    protected processUpdateDeviceSettings(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateIpRanges(ipFrom?: string | undefined, ipTo?: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/AppConfiguration/updateipranges?";
        if (ipFrom === null)
            throw new Error("The parameter 'ipFrom' cannot be null.");
        else if (ipFrom !== undefined)
            url_ += "ipFrom=" + encodeURIComponent("" + ipFrom) + "&";
        if (ipTo === null)
            throw new Error("The parameter 'ipTo' cannot be null.");
        else if (ipTo !== undefined)
            url_ += "ipTo=" + encodeURIComponent("" + ipTo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateIpRanges(_response));
        });
    }

    protected processUpdateIpRanges(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DeviceMovement implements IDeviceMovement {
    id!: number;
    deviceId!: string;
    movementPlanJson!: string;
    name!: string;
    movementPlan!: MovementPlan;

    constructor(data?: IDeviceMovement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deviceId = _data["deviceId"];
            this.movementPlanJson = _data["movementPlanJson"];
            this.name = _data["name"];
            this.movementPlan = _data["movementPlan"] ? MovementPlan.fromJS(_data["movementPlan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeviceMovement {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceMovement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["movementPlanJson"] = this.movementPlanJson;
        data["name"] = this.name;
        data["movementPlan"] = this.movementPlan ? this.movementPlan.toJSON() : <any>undefined;
        return data;
    }

    clone(): DeviceMovement {
        const json = this.toJSON();
        let result = new DeviceMovement();
        result.init(json);
        return result;
    }
}

export interface IDeviceMovement {
    id: number;
    deviceId: string;
    movementPlanJson: string;
    name: string;
    movementPlan: MovementPlan;
}

export class MovementPlan implements IMovementPlan {
    stepPoints!: MovementPoint[];

    constructor(data?: IMovementPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["stepPoints"])) {
                this.stepPoints = [] as any;
                for (let item of _data["stepPoints"])
                    this.stepPoints!.push(MovementPoint.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MovementPlan {
        data = typeof data === 'object' ? data : {};
        let result = new MovementPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.stepPoints)) {
            data["stepPoints"] = [];
            for (let item of this.stepPoints)
                data["stepPoints"].push(item.toJSON());
        }
        return data;
    }

    clone(): MovementPlan {
        const json = this.toJSON();
        let result = new MovementPlan();
        result.init(json);
        return result;
    }
}

export interface IMovementPlan {
    stepPoints: MovementPoint[];
}

export class MovementPoint implements IMovementPoint {
    stepOffset!: number;
    focusInCentimeter!: number;
    speed!: number;
    comment!: string;

    constructor(data?: IMovementPoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stepOffset = _data["stepOffset"];
            this.focusInCentimeter = _data["focusInCentimeter"];
            this.speed = _data["speed"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): MovementPoint {
        data = typeof data === 'object' ? data : {};
        let result = new MovementPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stepOffset"] = this.stepOffset;
        data["focusInCentimeter"] = this.focusInCentimeter;
        data["speed"] = this.speed;
        data["comment"] = this.comment;
        return data;
    }

    clone(): MovementPoint {
        const json = this.toJSON();
        let result = new MovementPoint();
        result.init(json);
        return result;
    }
}

export interface IMovementPoint {
    stepOffset: number;
    focusInCentimeter: number;
    speed: number;
    comment: string;
}

export class PictureSeriesData implements IPictureSeriesData {
    count!: number;
    fileName!: string;

    constructor(data?: IPictureSeriesData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            this.fileName = _data["fileName"];
        }
    }

    static fromJS(data: any): PictureSeriesData {
        data = typeof data === 'object' ? data : {};
        let result = new PictureSeriesData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        data["fileName"] = this.fileName;
        return data;
    }

    clone(): PictureSeriesData {
        const json = this.toJSON();
        let result = new PictureSeriesData();
        result.init(json);
        return result;
    }
}

export interface IPictureSeriesData {
    count: number;
    fileName: string;
}

export class CertificateData implements ICertificateData {
    certificate!: string;
    key!: string;

    constructor(data?: ICertificateData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.certificate = _data["certificate"];
            this.key = _data["key"];
        }
    }

    static fromJS(data: any): CertificateData {
        data = typeof data === 'object' ? data : {};
        let result = new CertificateData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificate"] = this.certificate;
        data["key"] = this.key;
        return data;
    }

    clone(): CertificateData {
        const json = this.toJSON();
        let result = new CertificateData();
        result.init(json);
        return result;
    }
}

export interface ICertificateData {
    certificate: string;
    key: string;
}

export class WebSshCredentials implements IWebSshCredentials {
    protocol!: string;
    port!: string;
    password!: string;
    user!: string;

    constructor(data?: IWebSshCredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.protocol = _data["protocol"];
            this.port = _data["port"];
            this.password = _data["password"];
            this.user = _data["user"];
        }
    }

    static fromJS(data: any): WebSshCredentials {
        data = typeof data === 'object' ? data : {};
        let result = new WebSshCredentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["protocol"] = this.protocol;
        data["port"] = this.port;
        data["password"] = this.password;
        data["user"] = this.user;
        return data;
    }

    clone(): WebSshCredentials {
        const json = this.toJSON();
        let result = new WebSshCredentials();
        result.init(json);
        return result;
    }
}

export interface IWebSshCredentials {
    protocol: string;
    port: string;
    password: string;
    user: string;
}

export class DeviceHealthState implements IDeviceHealthState {
    health!: DeviceHealth;
    retryTimes!: number;
    ip!: string;

    constructor(data?: IDeviceHealthState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.health = _data["health"] ? DeviceHealth.fromJS(_data["health"]) : <any>undefined;
            this.retryTimes = _data["retryTimes"];
            this.ip = _data["ip"];
        }
    }

    static fromJS(data: any): DeviceHealthState {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceHealthState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["retryTimes"] = this.retryTimes;
        data["ip"] = this.ip;
        return data;
    }

    clone(): DeviceHealthState {
        const json = this.toJSON();
        let result = new DeviceHealthState();
        result.init(json);
        return result;
    }
}

export interface IDeviceHealthState {
    health: DeviceHealth;
    retryTimes: number;
    ip: string;
}

export class DeviceHealth implements IDeviceHealth {
    deviceName!: string;
    deviceId!: string;
    state!: HealthState;

    constructor(data?: IDeviceHealth) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceName = _data["deviceName"];
            this.deviceId = _data["deviceId"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): DeviceHealth {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceHealth();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceName"] = this.deviceName;
        data["deviceId"] = this.deviceId;
        data["state"] = this.state;
        return data;
    }

    clone(): DeviceHealth {
        const json = this.toJSON();
        let result = new DeviceHealth();
        result.init(json);
        return result;
    }
}

export interface IDeviceHealth {
    deviceName: string;
    deviceId: string;
    state: HealthState;
}

export enum HealthState {
    NA = 0,
    NoirCameraFound = 1,
    ThermalCameraFound = 2,
    NoirCameraFunctional = 4,
    ThermalCameraFunctional = 8,
    SystemCalibrated = 16,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

/* eslint-disable @typescript-eslint/no-unused-vars */